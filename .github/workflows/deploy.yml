name: Docker CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  TF_CLOUD_ORGANIZATION: "KansoCloud"
  TF_WORKSPACE: "hcp-with-git"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      # Export Terraform Cloud API Token (retrieves from GitHub Secrets)
      - name: Export Terraform Cloud API Token
        run: echo "TF_API_TOKEN=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV

      # AWS credentials are not in GitHub secrets but accessed via Terraform Cloud
      - name: Configure AWS credentials
        run: |
          export AWS_ACCESS_KEY_ID=$(terraform output -raw aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(terraform output -raw aws_secret_access_key)
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

      # Initialize Terraform (using variables from HCP)
      - name: Terraform Init
        run: terraform init -backend-config="organization=${{ env.TF_CLOUD_ORGANIZATION }}" \
                             -backend-config="token=${{ secrets.TF_API_TOKEN }}" \
                             -backend-config="workspace=${{ env.TF_WORKSPACE }}"
        working-directory: ${{ env.CONFIG_DIRECTORY }}

      # Select Terraform Workspace
      - name: Select Terraform Workspace
        run: terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}
        working-directory: ${{ env.CONFIG_DIRECTORY }}

      # Apply Terraform
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ env.CONFIG_DIRECTORY }}

  build_and_deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Docker login using credentials from Terraform Cloud (not GitHub secrets)
      - name: Log in to Docker Hub
        run: |
          export DOCKER_USERNAME=$(terraform output -raw docker_username)
          export DOCKER_PASSWORD=$(terraform output -raw docker_password)
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> $GITHUB_ENV
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: navyakola104/webapp:${{ github.sha }}

      # Deploy Docker image to EC2 (using EC2 credentials from HCP)
      - name: Deploy to EC2
        run: |
          export EC2_HOST=$(terraform output -raw ec2_host)
          export EC2_USERNAME=$(terraform output -raw ec2_username)
          echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
          echo "EC2_USERNAME=$EC2_USERNAME" >> $GITHUB_ENV
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # Ensure your private key is still stored in GitHub secrets
          script: |
            docker stop webapp || true
            docker rm webapp || true
            docker pull ${{ env.DOCKER_USERNAME }}/webapp:${{ github.sha }}
            docker run -d --name webapp -p 80:80 ${{ env.DOCKER_USERNAME }}/webapp:${{ github.sha }}
